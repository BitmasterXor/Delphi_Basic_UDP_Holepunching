unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, IdUDPClient,
  IdBaseComponent, IdComponent, IdUDPBase, IdUDPServer, Vcl.StdCtrls, IdGlobal,
  IdSocketHandle, Vcl.ComCtrls, Vcl.Mask;

type
  TForm1 = class(TForm)
    pnlTop: TPanel;
    pnlMain: TPanel;
    pnlBottom: TPanel;
    Timer1: TTimer;
    IdUDPServer1: TIdUDPServer;
    IdUDPClient1: TIdUDPClient;
    btnStart: TButton;
    btnStop: TButton;
    btnClear: TButton;
    memLog: TMemo;
    edtRemoteHost: TLabeledEdit;
    statusBar: TStatusBar;
    lblStatus: TLabel;
    rbRole: TRadioGroup;
    procedure Timer1Timer(Sender: TObject);
    procedure btnStartClick(Sender: TObject);
    procedure btnStopClick(Sender: TObject);
    procedure btnClearClick(Sender: TObject);
    procedure IdUDPServer1UDPRead(AThread: TIdUDPListenerThread;
      const AData: TIdBytes; ABinding: TIdSocketHandle);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure rbRoleClick(Sender: TObject);
  private
    FIsRunning: Boolean;
    procedure UpdateStatus(const AStatus: string);
    procedure SetupComponents;
    procedure ConfigurePorts;
  public
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);
begin
  SetupComponents;
  ConfigurePorts;
  FIsRunning := False;
  UpdateStatus('Ready');
end;

procedure TForm1.SetupComponents;
begin
  Self.Position := poScreenCenter;
  Self.Caption := 'UDP Hole Punching Tool';

  pnlTop.Height := 120;
  pnlTop.Align := alTop;
  pnlBottom.Height := 40;
  pnlBottom.Align := alBottom;
  pnlMain.Align := alClient;

  rbRole.Items.Clear;
  rbRole.Items.Add('Your PC');
  rbRole.Items.Add('Another PC');
  rbRole.ItemIndex := 0;

  memLog.Align := alClient;
  memLog.ScrollBars := ssBoth;

  Timer1.Enabled := False;
  Timer1.Interval := 1000;
end;

procedure TForm1.ConfigurePorts;
begin
  if rbRole.ItemIndex = 0 then  // Your PC
  begin
    IdUDPServer1.DefaultPort := 7777;
    IdUDPClient1.BoundPort := 7777;
    IdUDPClient1.Port := 8888;
    memLog.Lines.Add('Mode: Your PC');
    memLog.Lines.Add('Server Port: 7777');
    memLog.Lines.Add('Client Bound Port: 7777');
    memLog.Lines.Add('Client Target Port: 8888');
  end
  else  // Another PC
  begin
    IdUDPServer1.DefaultPort := 8888;
    IdUDPClient1.BoundPort := 8888;
    IdUDPClient1.Port := 7777;
    memLog.Lines.Add('Mode: Another PC');
    memLog.Lines.Add('Server Port: 8888');
    memLog.Lines.Add('Client Bound Port: 8888');
    memLog.Lines.Add('Client Target Port: 7777');
  end;
end;

procedure TForm1.rbRoleClick(Sender: TObject);
begin
  if not FIsRunning then
    ConfigurePorts;
end;

procedure TForm1.UpdateStatus(const AStatus: string);
begin
  statusBar.SimpleText := AStatus;
  lblStatus.Caption := AStatus;
  Application.ProcessMessages;
end;

procedure TForm1.btnStartClick(Sender: TObject);
begin
  try
    if trim(edtRemoteHost.Text) = '' then
      raise Exception.Create('Remote host cannot be empty');

    IdUDPClient1.Host := edtRemoteHost.Text;

    Timer1.Enabled := True;
    btnStart.Enabled := False;
    btnStop.Enabled := True;
    rbRole.Enabled := False;
    FIsRunning := True;

    UpdateStatus('Connection started');
    memLog.Lines.Add('=== Session Started ===');
  except
    on E: Exception do
    begin
      UpdateStatus('Error: ' + E.Message);
      memLog.Lines.Add('ERROR: ' + E.Message);
    end;
  end;
end;

procedure TForm1.btnStopClick(Sender: TObject);
begin
  Timer1.Enabled := False;
  IdUDPServer1.Active := False;
  IdUDPClient1.Active := False;
  btnStart.Enabled := True;
  btnStop.Enabled := False;
  rbRole.Enabled := True;
  FIsRunning := False;
  UpdateStatus('Connection stopped');
  memLog.Lines.Add('=== Session Stopped ===');
end;

procedure TForm1.btnClearClick(Sender: TObject);
begin
  memLog.Clear;
  ConfigurePorts;
  UpdateStatus('Log cleared');
end;

procedure TForm1.IdUDPServer1UDPRead(AThread: TIdUDPListenerThread;
  const AData: TIdBytes; ABinding: TIdSocketHandle);
begin
  memLog.Lines.Add(Format('[%s] From %s:%d - %s',
    [FormatDateTime('hh:nn:ss', Now),
     ABinding.PeerIP,
     ABinding.PeerPort,
     BytesToString(AData)]));

  Caption := Format('Last message from port: %d', [ABinding.PeerPort]);
end;

procedure TForm1.Timer1Timer(Sender: TObject);
begin
  try
    if not FIsRunning then
      Exit;

    UpdateStatus('Sending message...');
    IdUDPServer1.Active := False;

    IdUDPClient1.Active := True;
    IdUDPClient1.Send('HELLO');
    memLog.Lines.Add(Format('[%s] Sent HELLO to %s:%d',
      [FormatDateTime('hh:nn:ss', Now),
       IdUDPClient1.Host,
       IdUDPClient1.Port]));

    IdUDPClient1.Active := False;
    IdUDPServer1.Active := True;

    UpdateStatus('Listening...');
  except
    on E: Exception do
    begin
      UpdateStatus('Error: ' + E.Message);
      memLog.Lines.Add('ERROR: ' + E.Message);
    end;
  end;
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
  Timer1.Enabled := False;
  if IdUDPServer1.Active then
    IdUDPServer1.Active := False;
  if IdUDPClient1.Active then
    IdUDPClient1.Active := False;
end;

end.
