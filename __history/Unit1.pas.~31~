unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, IdUDPClient,
  IdBaseComponent, IdComponent, IdUDPBase, IdUDPServer, Vcl.StdCtrls, IdGlobal,
  IdSocketHandle, Vcl.ComCtrls, Vcl.Mask;

type
  TForm1 = class(TForm)
    pnlTop: TPanel;
    pnlMain: TPanel;
    pnlBottom: TPanel;
    Timer1: TTimer;
    IdUDPServer1: TIdUDPServer;
    IdUDPClient1: TIdUDPClient;
    btnStart: TButton;
    btnStop: TButton;
    btnClear: TButton;
    memLog: TMemo;
    edtRemoteHost: TLabeledEdit;
    edtLocalPort: TLabeledEdit;
    edtRemotePort: TLabeledEdit;
    statusBar: TStatusBar;
    lblStatus: TLabel;
    procedure Timer1Timer(Sender: TObject);
    procedure btnStartClick(Sender: TObject);
    procedure btnStopClick(Sender: TObject);
    procedure btnClearClick(Sender: TObject);
    procedure IdUDPServer1UDPRead(AThread: TIdUDPListenerThread;
      const AData: TIdBytes; ABinding: TIdSocketHandle);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    FIsRunning: Boolean;
    procedure UpdateStatus(const AStatus: string);
    procedure SetupComponents;
    procedure ValidateSettings;
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);
begin
  SetupComponents;
  FIsRunning := False;
  UpdateStatus('Ready');
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
  Timer1.Enabled := False;
  if IdUDPServer1.Active then
    IdUDPServer1.Active := False;
  if IdUDPClient1.Active then
    IdUDPClient1.Active := False;
end;

procedure TForm1.SetupComponents;
begin
  // Configure form
  Self.Position := poScreenCenter;
  Self.Caption := 'UDP Hole Punching Tool';

  // Configure panels
  pnlTop.Height := 120;
  pnlTop.Align := alTop;
  pnlBottom.Height := 40;
  pnlBottom.Align := alBottom;
  pnlMain.Align := alClient;

  // Configure edit boxes
  edtRemoteHost.EditLabel.Caption := 'Remote Host:';
  edtLocalPort.EditLabel.Caption := 'Local Port:';
  edtRemotePort.EditLabel.Caption := 'Remote Port:';
  edtLocalPort.Text := '8888';
  edtRemotePort.Text := '7777';

  // Configure memo
  memLog.Align := alClient;
  memLog.ScrollBars := ssBoth;

  // Configure status bar
  statusBar.SimplePanel := True;

  // Configure timer
  Timer1.Enabled := False;
  Timer1.Interval := 1000;
end;

procedure TForm1.ValidateSettings;
var
  LocalPort, RemotePort: Integer;
begin
  if trim(edtRemoteHost.Text) = '' then
    raise Exception.Create('Remote host cannot be empty');

  if not TryStrToInt(edtLocalPort.Text, LocalPort) or (LocalPort <= 0) or (LocalPort > 65535) then
    raise Exception.Create('Invalid local port number');

  if not TryStrToInt(edtRemotePort.Text, RemotePort) or (RemotePort <= 0) or (RemotePort > 65535) then
    raise Exception.Create('Invalid remote port number');
end;

procedure TForm1.UpdateStatus(const AStatus: string);
begin
  statusBar.SimpleText := AStatus;
  lblStatus.Caption := AStatus;
  Application.ProcessMessages;
end;

procedure TForm1.btnStartClick(Sender: TObject);
begin
  try
    ValidateSettings;

    IdUDPClient1.Host := edtRemoteHost.Text;
    IdUDPClient1.Port := StrToInt(edtRemotePort.Text);
    IdUDPServer1.DefaultPort := StrToInt(edtLocalPort.Text);

    Timer1.Enabled := True;
    btnStart.Enabled := False;
    btnStop.Enabled := True;
    FIsRunning := True;

    UpdateStatus('Connection started');
    memLog.Lines.Add('=== Session Started ===');
    memLog.Lines.Add(Format('Local Port: %s', [edtLocalPort.Text]));
    memLog.Lines.Add(Format('Remote Host: %s', [edtRemoteHost.Text]));
    memLog.Lines.Add(Format('Remote Port: %s', [edtRemotePort.Text]));
  except
    on E: Exception do
    begin
      UpdateStatus('Error: ' + E.Message);
      memLog.Lines.Add('ERROR: ' + E.Message);
    end;
  end;
end;

procedure TForm1.btnStopClick(Sender: TObject);
begin
  Timer1.Enabled := False;
  IdUDPServer1.Active := False;
  IdUDPClient1.Active := False;
  btnStart.Enabled := True;
  btnStop.Enabled := False;
  FIsRunning := False;
  UpdateStatus('Connection stopped');
  memLog.Lines.Add('=== Session Stopped ===');
end;

procedure TForm1.btnClearClick(Sender: TObject);
begin
  memLog.Clear;
  UpdateStatus('Log cleared');
end;

procedure TForm1.IdUDPServer1UDPRead(AThread: TIdUDPListenerThread;
  const AData: TIdBytes; ABinding: TIdSocketHandle);
var
  ReceivedMsg: string;
begin
  ReceivedMsg := BytesToString(AData);
  memLog.Lines.Add(Format('[%s] From %s:%d - %s',
    [FormatDateTime('hh:nn:ss', Now),
     ABinding.PeerIP,
     ABinding.PeerPort,
     ReceivedMsg]));

  Caption := Format('Last message from port: %d', [ABinding.PeerPort]);
end;

procedure TForm1.Timer1Timer(Sender: TObject);
begin
  try
    if not FIsRunning then
      Exit;

    UpdateStatus('Sending message...');
    IdUDPServer1.Active := False;

    IdUDPClient1.Active := True;
    IdUDPClient1.Send('HELLO');
    memLog.Lines.Add(Format('[%s] Sent HELLO to %s:%d',
      [FormatDateTime('hh:nn:ss', Now),
       IdUDPClient1.Host,
       IdUDPClient1.Port]));

    IdUDPClient1.Active := False;
    IdUDPServer1.Active := True;

    UpdateStatus('Listening...');
  except
    on E: Exception do
    begin
      UpdateStatus('Error: ' + E.Message);
      memLog.Lines.Add('ERROR: ' + E.Message);
    end;
  end;
end;

end.
